# Variables Team
TEAM_ID_ITC = '685846'
TEAM_ID     = 'DEDQBH6J8S'
TEAM_NAME   = 'SoftDesign Consultoria e Sistemas LTDA'

# Variables Access
APPLE_ID                   = 'juliano@julianoterres.com.br'
APPLE_PASSWORD_PUBLISH_APP = 'rdhy-qaju-wjtk-hyjz'

# Variables App
APP_SKU = '1533832490'
APP_ID  = '1424416935'

# Variables Project
PROJECT_IDENTIFIER      = 'br.com.softdesign.marveltests'
PROJECT_WORKSPACE       = 'Marvel.xcworkspace'
PROJECT_XCODEPROJ       = 'Marvel.xcodeproj'
PROJECT_PBXPROJ         = PROJECT_XCODEPROJ + '/project.pbxproj'
PROJECT_IPA_NAME        = 'marvel.ipa'
PROJECT_ICON_NAME       = 'AppIcon.png'
PROJECT_SCHEME          = 'Marvel'
PROJECT_SCHEME_UI_TESTS = 'MarvelUITests'
PROJECT_NAME            = 'SoftDesign Marvel'
PROJECT_LANGUAGES       = 'English'

# Variables Tests
TEST_DEVICES        = ['iPhone 6s']
TEST_EMAIL_FEEDBACK = 'juliano@julianoterres.com.br'
TEST_GROUPS         = ['External Testers']

# Variables Screenshots
SCREENSHOTS_DEVICES = (["iPad Pro (12.9-inch)", "iPhone X", "iPhone 8 Plus"])

# Variables Rating
RATING_CONFIG_FILE_NAME = 'config.json'

# Variables Certificates
CERTIFICATE_PROVISION_PROFILE_NAME = 'marvel.mobileprovision'
CERTIFICATE_SIGNING_NAME           = 'iPhone Distribution: '+TEAM_NAME+' ('+TEAM_ID+')'

# Variables Paths
PATH_CERTIFICATES_PROVISION_PROFILE = './fastlane/certs/provisioning_profile/'
PATH_CERTIFICATES_SIGNING           = './fastlane/certs/signing/'
PATH_SCREENSHOTS                    = './fastlane/screenshots/'
PATH_METADATA                       = './fastlane/metadata/'
PATH_BUILD                          = './fastlane/builds/'
PATH_RATING                         = './fastlane/rating/'
PATH_TESTERS_USERS                  = './fastlane/testers/'

# Variables Integration
INTEGRATION_SLACK_UR = 'https://hooks.slack.com/services/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'

# Variables Global Fastlane
ENV['FASTLANE_ITC_TEAM_ID']                         = TEAM_ID_ITC
ENV['FASTLANE_ITC_TEAM_NAME']                       = TEAM_NAME
ENV['FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD'] = APPLE_PASSWORD_PUBLISH_APP

# Start Fastlane

fastlane_version '2.99.0'
default_platform(:ios)

platform :ios do

  # Triger when have error
  error do |lane, exception, options|
    slack(
      message: PROJECT_NAME + ' failed',
      success: false,
      slack_url: INTEGRATION_SLACK_UR
    )
  end

  # Install pod dependencies
  lane :install_pods do
    cocoapods(
      use_bundle_exec: false,
      clean: true,
      podfile: "./Podfile"
    )
  end

  # Run tests and swiftlint
  lane :all_tests do
    swiftlint
    tests(
      workspace: PROJECT_WORKSPACE,
      devices: TEST_DEVICES,
      clean: true,
      scheme: PROJECT_SCHEME
    )
  end

  # Run make screenshots
  lane :screenshots do
    capture_ios_screenshots(
      scheme: PROJECT_SCHEME_UI_TESTS,
      devices: SCREENSHOTS_DEVICES,
      output_directory: PATH_SCREENSHOTS,
      output_simulator_logs: true,
      clear_previous_screenshots: true,
      skip_open_summary: true
    )
    frame_screenshots(
      white: true
    )
  end

  # Run create a App ID in apple developer
  lane :create_app_itunes do
    produce(
      username: APPLE_ID,
      itc_team_id: TEAM_ID_ITC,
      app_identifier: PROJECT_IDENTIFIER,
      app_name: PROJECT_NAME,
      language: PROJECT_LANGUAGES,
      team_name: TEAM_NAME
    )
  end

  # Run certificates production
  lane :get_certificates_production do
    get_certificates(
      development: false,
      username: APPLE_ID,
      output_path: PATH_CERTIFICATES_SIGNING,
      team_id: TEAM_ID
    )
  end
  
  # Run provisioning profile production
  lane :provisioning_profile_production do
    get_provisioning_profile(
      adhoc: false,
      force: true,
      app_identifier: PROJECT_IDENTIFIER,
      username: APPLE_ID,
      team_id: TEAM_ID,
      filename: CERTIFICATE_PROVISION_PROFILE_NAME,
      output_path: PATH_CERTIFICATES_PROVISION_PROFILE
    )
  end

  # Run config provisioning profile
  lane :config_provisioning_profile do
    backup_file(
      path: PROJECT_PBXPROJ
    )
    disable_automatic_code_signing(
      path: PROJECT_XCODEPROJ,
      use_automatic_signing: false
    )
    update_project_provisioning(
      xcodeproj: PROJECT_XCODEPROJ,
      profile: PATH_CERTIFICATES_PROVISION_PROFILE + CERTIFICATE_PROVISION_PROFILE_NAME,
      build_configuration: "Release",
      code_signing_identity: CERTIFICATE_SIGNING_NAME
    )
    update_project_provisioning(
      xcodeproj: PROJECT_XCODEPROJ,
      profile: PATH_CERTIFICATES_PROVISION_PROFILE + CERTIFICATE_PROVISION_PROFILE_NAME,
      build_configuration: "Debug",
      code_signing_identity: CERTIFICATE_SIGNING_NAME
    )
  end

  # Run config provisioning profile automatic
  lane :config_provisioning_profile_automatic do
    restore_file(
      path: PROJECT_PBXPROJ
    )
  end

  # Run build and archive app
  lane :app_build do
    config_provisioning_profile()
    build_app(
      scheme: PROJECT_SCHEME,
      workspace: PROJECT_WORKSPACE,
      include_bitcode: true,
      output_directory: PATH_BUILD,
      clean: true,
      export_method: 'app-store'
    )
    config_provisioning_profile_automatic()
  end

  # Run upload app to itunes connect production
  lane :send_store do
    upload_to_app_store(
      force: true,
      overwrite_screenshots: true,
      username: APPLE_ID,
      app_identifier: PROJECT_IDENTIFIER,
      metadata_path: PATH_METADATA,
      app_icon: PATH_METADATA + PROJECT_ICON_NAME,

  ipa: PATH_BUILD + PROJECT_IPA_NAME,
      app_rating_config_path: PATH_RATING + RATING_CONFIG_FILE_NAME,
      submit_for_review: true,
      automatic_release: true,
      skip_waiting_for_build_processing: true,
      skip_binary_upload: true,
      submission_information: {
        add_id_info_limits_tracking: true,
        add_id_info_serves_ads: true,
        add_id_info_tracks_action: true,
        add_id_info_tracks_install: true,
        add_id_info_uses_idfa: true,
        content_rights_has_rights: true,
        content_rights_contains_third_party_content: true,
        export_compliance_platform: 'ios',
        export_compliance_compliance_required: false,
        export_compliance_encryption_updated: false,
        export_compliance_app_type: nil,
        export_compliance_uses_encryption: false,
        export_compliance_is_exempt: false,
        export_compliance_contains_third_party_cryptography: false,
        export_compliance_contains_proprietary_cryptography: false,
        export_compliance_available_on_french_store: false
      }
    )
  end

  # Run upload app to itunes connect testfligth
  lane :testfligth do
    upload_to_testflight(
      apple_id: APP_ID,
      username: APPLE_ID,
      app_identifier: PROJECT_IDENTIFIER,
      ipa: PATH_BUILD + PROJECT_IPA_NAME,
      skip_waiting_for_build_processing: false,
      distribute_external: true,
      testers_file_path: PATH_TESTERS_USERS + 'users.csv',
      groups: TEST_GROUPS,
      notify_external_testers: true,
      changelog: read_changelog,
      beta_app_description: 'App version beta to test',
      beta_app_feedback_email: TEST_EMAIL_FEEDBACK
    )
  end

  # Run notification mac when finished the upload to testfligth
  lane :notification_finished_testfligth do
    notification(
      subtitle: "Finished Upload",
      message: "The upload of app to testfligth finished"
    )
  end
  
  # Run notification mac when finished the upload to apple store
  lane :notification_finished_apple_store do
    notification(
      subtitle: "Finished Upload",
      message: "The upload of app to apple store finished"
    )
  end

  # Run add external users in testfligth
  lane :add_external_users do
    
    Dir.chdir ".." do
      sh 'bundle exec fastlane pilot import -c ./fastlane/testers/users.csv --username='+APPLE_ID+' --app_identifier='+PROJECT_IDENTIFIER+' --team_id='+TEAM_ID_ITC
    end

  end

  # Run slack when success
  lane :slack_success do
    slack(
      message: PROJECT_NAME + ' success',
      success: true,
      slack_url: INTEGRATION_SLACK_UR
    )
  end

  # Run all steps to upload app to itunes connect production
  lane :send_production do
    install_pods
    all_tests
    screenshots
    get_certificates_production
    provisioning_profile_production
    app_build
    send_store
    notification_finished_apple_store
    notification_finished_apple_store_in_slack
    slack_success
  end

  # Run all steps to upload app to itunes connect testfligth
  lane :send_testfligth do
    add_external_users
    install_pods
    # all_tests
    get_certificates_production
    provisioning_profile_production
    app_build
    testfligth
    notification_finished_testfligth
    notification_finished_testfligth_in_slack
    slack_success
  end

end
